DESCRIPTION 12

Задача, когда требуется создать Map, работающий в две стороны
(по ключу получать значение, а по значению ключ) не такая уж и редкая.
Такие коллекции уже реализованы в различных сторонних библиотеках коллекций.
Одна из таких Guava от Google.
12.1. Скачай и подключи библиотеку guava версии 19.0.
12.2. Реализуй стратегию HashBiMapStorageStrategy. Она должна:
12.2.1. Поддерживать интерфейс StorageStrategy.
12.2.2. Внутри иметь только одно поле data типа HashBiMap.
12.3. Проверь новую стратегию в методе main(). Запусти программу и сравни скорость работы пяти стратегий.
Требования:

    •
    Класс HashBiMapStorageStrategy должен поддерживать интерфейс StorageStrategy.
    •
    В классе HashBiMapStorageStrategy должно быть создано только одно поле data типа HashBiMap.
    •
    Метод containsKey должен проверять содержится ли ключ в data.
    •
    Метод containsValue должен проверять содержится ли значение в data.
    •
    Метод put должен добавлять пару (key, value) в data.
    •
    Метод getValue должен возвращать значение полученное из data.
    •
    Метод getKey должен возвращать значение полученное из data.inverse().


DESCRIPTION 13

Рассмотрим еще одну реализацию BiMap, на этот раз из Apache Commons Collections.
13.1. Скачай и подключи Apache Commons Collections 4.0.
13.2. Реализуй стратегию DualHashBidiMapStorageStrategy. Она должна:
13.2.1. Поддерживать интерфейс StorageStrategy.
13.2.2. Внутри иметь только одно поле data с типом DualHashBidiMap.
13.3. Проверь новую стратегию в методе main(). Запусти программу и сравни скорость работы шести стратегий.
Требования:

    •
    Класс DualHashBidiMapStorageStrategy должен поддерживать интерфейс StorageStrategy.
    •
    В классе DualHashBidiMapStorageStrategy должно быть создано только одно поле data типа DualHashBidiMap.
    •
    Метод containsKey() должен проверять содержится ли ключ в data.
    •
    Метод containsValue() должен проверять содержится ли значение в data.
    •
    Метод put() должен добавлять пару (key, value) в data.
    •
    Метод getValue() должен возвращать значение полученное из data.
    •
    Метод getKey() должен возвращать ключ полученный из data.getKey().