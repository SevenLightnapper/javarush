DESCRIPTION 8

Теперь создадим костяк класса Figure.
Этот класс будет описывать падающую фигурку.

Нам понадобятся ее координаты и форма.
За координаты будут отвечать две переменные x и y.
За форму - матрица. Двумерный массив 3×3, состоящий из единиц и нулей.
Единицей мы обозначаем что клетка есть, нулем - что она пустая.

Добавь в класс Figure два поля поля: x типа int, y типа int.
Еще добавь двумерный массив: matrix(матрица) типа int[][].
Там же добавь getter'ы для созданных переменных.
Добавь конструктор с тремя параметрами x, y, matrix.
Требования:

    •
    В классе Figure должно быть создано приватное поле x типа int.
    •
    В классе Figure должно быть создано приватное поле y типа int.
    •
    В классе Figure должно быть создано приватное поле matrix типа int[][](целочисленный двумерный массив).
    •
    В классе Figure должен быть создан корректный геттер для поля х.
    •
    В классе Figure должен быть создан корректный геттер для поля y.
    •
    В классе Figure должен быть создан корректный геттер для поля matrix.
    •
    В классе Figure должен быть создан корректно работающий public конструктор с тремя параметрами int, int и int[][] (x, y и matrix).


DESCRIPTION 9

Если ты обратил внимание, мы пишем программу "сверху вниз".
Сначала решили, какие классы нам нужны. Затем - какие методы.
А потом уже начнем писать код этих методов.
Таким образом мы разбиваем большую задачу на множество маленьких.
Когда код всех методов будет готов, останется только проверить - так ли все работает, как должно быть.
И если надо - внести некоторые изменения.
Требования:
    •
    Пересмотри созданную структуру классов и обрати внимание на порядок написания программы.


DESCRIPTION 10

Также нам понадобятся методы для управления фигуркой.

Добавь в класс Figure методы:
left() - для движения фигурки влево.
right() - для движения фигурки вправо.
down() - для движения фигурки вниз.
up() - для движения фигурки вверх.
rotate() - для поворота фигурки вокруг главной диагонали.
downMaximum() - падение фигурки в низ до дна.
boolean isCurrentPositionAvailable() - проверка - может ли фигурка быть помещена в текущую позицию.
Для теста захардкодь результат в true, пока мы не реализовали логику.
landed() - вызывается, когда фигурка достигла дна или уперлась в другую фигурку
Все ее занятые клетки теперь должны добавиться в Field.
Требования:

    •
    В классе Figure должен быть создан метод left без параметров.
    •
    В классе Figure должен быть создан метод right без параметров.
    •
    В классе Figure должен быть создан метод down без параметров.
    •
    В классе Figure должен быть создан метод up без параметров.
    •
    В классе Figure должен быть создан метод rotate без параметров.
    •
    В классе Figure должен быть создан метод downMaximum без параметров.
    •
    В классе Figure должен быть создан метод isCurrentPositionAvailable без параметров.
    •
    В классе Figure должен быть создан метод landed без параметров.
    •
    Метод isCurrentPositionAvailable должен возвращать true.