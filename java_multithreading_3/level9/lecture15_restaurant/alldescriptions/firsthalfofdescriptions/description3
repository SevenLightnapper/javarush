




Сейчас мы можем создавать заказы. Давай сделаем так, чтобы они автоматически поступали к повару.
Есть много различных способов реализации данной функциональности.
Почитай про паттерн Observer - http://en.wikipedia.org/wiki/Observer_pattern
Он уже реализован в java, и мы его будем использовать.

1. Создадим класс Cook(Повар) в пакете kitchen, он будет готовить.
Пусть в конструкторе приходит его имя, которое выводится методом toString.

2. Tablet создает заказы, а Cook их обрабатывает.
Расставь правильно Observer и Observable между Tablet и Cook.

3. Метод void update(Observable observable, Object arg),
 который необходимо реализовать, принимает два параметра.
- observable - объект, который отправил нам значение
- arg - само значение, в нашем случае - это объект Order
На данном этапе мы будем лишь имитировать обработку и выведем в консоль "Start cooking - " + order

3. Пишем main.
Для объекта Observable добавляем свой объект Observer. См. п.2 и описание паттерна в wikipedia
Называем повара, имя не влияет на тесты. В моем варианте - это Amigo : )

Сверим выводы в консоль. Пример моего вывода:
Your order: [Soup] of Tablet{number=5}
Start cooking - Your order: [Soup] of Tablet{number=5}

4. Не забудь сразу после создания заказа и вывода информации о нем в консоль (найдите это место в коде) сделать следующее:
4.1. Установить флаг setChanged()
4.2. Отправить обсерверу заказ - notifyObservers(order);

5. Также внесем небольшое изменение.
Сделай так чтобы метод createOrder возвращал текущий заказ или null, если заказ создать не удалось.
Требования:

    •
    Конструктор класса Cook должен принимать в качестве параметра строку и инициализировать имя повара (поле name).
    •
    Метод toString класса Cook должен возвращать значение поля name.
    •
    Класс Cook должен реализовывать интерфейс Observer.
    •
    Класс Tablet должен быть потомком класса Observable.
    •
    В методе createOrder класса Tablet должен быть вызван метод setChanged.
    •
    В методе createOrder класса Tablet должен быть вызван метод notifyObservers
     с текущим заказом в качестве параметра.
    •
    Метод update в классе Cook должен выводить на экран строку форматированную согласно заданию.
    •
    В методе main класса Restaurant должен быть создан новый повар и
     добавлен планшету в качестве наблюдателя с помощью метода addObserver.