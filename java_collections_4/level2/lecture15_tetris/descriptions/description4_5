

DESCRIPTION 4

Так же еще нам понадобится пара методов.
Добавь в класс Tetris методы run() и step():

run() будет отвечать за всю игру.
А step() - за один шаг в игре.

Тип возвращаемого значения void для обоих методов.

Тут и в будущем,
если нет явных указаний с каким модификатором доступа создавать метод,
то он должен быть публичным, а поле приватным.

*В общем случае, стоит руководствоваться правилом использования наиболее строгого(из возможных) модификатора доступа.
*Т.е. если логика системы предполагает обращения к методу извне класса, мы не сможем сделать такой метод приватным.
*Но также нет никаких причин указывать уровень доступа public для методов которые будут использованы только в рамках пакета.
*Поначалу это кажется несущественным, но на самом деле это один из основополагающих принципов ООП.
*Учись сразу делать правильно!

Требования:

    •
    В классе Tetris должен быть создан метод run без параметров.
    •
    В классе Tetris должен быть создан метод step без параметров.
    •
    Метод run НЕ должен быть приватным.
    •
    Метод step НЕ должен быть приватным.
    •
    Метод run не должен возвращать значение.
    •
    Метод step не должен возвращать значение.
    
    
DESCRIPTION 5

Теперь нужно создать объект самого Тетриса.
Добавь в класс Tetris статическое поле game типа Tetris.
Поле game НЕ должно быть приватным.

Затем в методе main создай объект типа Тетрис и сохрани его в эту переменную.
Затем добавь вызов метода run.
Требования:

    •
    В классе Tetris должно быть создано поле game.
    •
    Поле game НЕ должно быть приватным.
    •
    Поле game должно быть статическим.
    •
    Поле game должно быть типа Tetris.
    •
    В методе main поле game должно быть инициализировано новым объектом типа Tetris.
    •
    В методе main должен быть вызван метод run на объекте сохраненном в поле game.