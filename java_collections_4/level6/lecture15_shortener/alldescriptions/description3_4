DESCRIPTION 3

Вернемся к классу Shortener:
3.1. Добавь в него поле Long lastId. Проинициализируй его нулем. Это поле будет
отвечать за последнее значение идентификатора, которое было использовано при добавлении новой строки в хранилище.
3.2. Добавь поле StorageStrategy storageStrategy в котором будет храниться стратегия хранения данных.
3.3. Добавь конструктор, который принимает StorageStrategy и инициализирует соответствующее поле класса.
3.4. Реализуй метод getId, он должен:
3.4.1. Проверить есть ли переданное значение в хранилище, если есть - вернуть его ключ.
3.4.2. Если преданного значения нет в хранилище, то:
3.4.2.1. Увеличить значение lastId на единицу;
3.4.2.2. Добавить в хранилище новую пару ключ-значение (новое значение lastId и переданную строку);
3.4.2.3. Вернуть новое значение lastId.
3.5. Реализуй метод getString, он должен вернуть строку по заданному идентификатору (ключу).
3.6. Предусмотреть возможность вызова методов getId и getString из разных потоков
добавив соответствующий модификатор к заголовкам методов.
Требования:

    •
    В классе Shortener должно быть создано приватное поле Long lastId инициализированное нулем.
    •
    В классе Shortener должно быть создано приватное поле storageStrategy типа StorageStrategy.
    •
    Конструктор класса Shortener должен принимать один параметр типа StorageStrategy и инициализировать им поле storageStrategy.
    •
    Метод getId должен быть реализован в соответствии с условием задачи.
    •
    Метод getString должен быть реализован в соответствии с условием задачи.


DESCRIPTION 4

Нам потребуется несколько вспомогательных классов:
4.1. Создай класс Helper.
4.1.1. Добавь в него статический метод String generateRandomString(), который будет генерировать случайную строку.
Воспользуйся для этого классами SecureRandom и BigInteger.
Подсказка: гугли запрос "random string java".
Строка может состоять из цифр и любой из 26 маленьких букв английского алфавита.
4.1.2. Добавь в класс статический метод printMessage(String message).
Он должен выводить переданный текст в консоль.
Весь дальнейший вывод в программе должен быть реализован через этот метод!
4.2. Создай класс ExceptionHandler.
4.2.1. Добавь в него статический метод log(Exception e), который будет выводить краткое описание исключения.
Требования:

    •
    Метод generateRandomString класса Helper должен генерировать случайную строку используя способ описанный в условии задачи.
    •
    Метод printMessage класса Helper должен выводить переданный текст на экран.
    •
    Метод log класса ExceptionHandler должен выводить на экран краткое описание исключения.